# üèõÔ∏è ODEO - Script d'installation PowerShell pour Windows
# Ce script installe et configure automatiquement l'application ODEO sur Windows

Write-Host "üèõÔ∏è === INSTALLATION ODEO === üèõÔ∏è" -ForegroundColor Cyan
Write-Host ""

# Fonction pour afficher les messages color√©s
function Write-Info($message) {
    Write-Host "‚ÑπÔ∏è  $message" -ForegroundColor Blue
}

function Write-Success($message) {
    Write-Host "‚úÖ $message" -ForegroundColor Green
}

function Write-Warning($message) {
    Write-Host "‚ö†Ô∏è  $message" -ForegroundColor Yellow
}

function Write-Error($message) {
    Write-Host "‚ùå $message" -ForegroundColor Red
}

# V√©rification des pr√©requis
function Check-Requirements {
    Write-Info "V√©rification des pr√©requis..."
    
    # V√©rifier Node.js
    try {
        $nodeVersion = node --version
        Write-Success "Node.js $nodeVersion d√©tect√©"
    }
    catch {
        Write-Error "Node.js n'est pas install√©. Veuillez l'installer depuis https://nodejs.org/"
        exit 1
    }
    
    # V√©rifier npm
    try {
        $npmVersion = npm --version
        Write-Success "npm $npmVersion d√©tect√©"
    }
    catch {
        Write-Error "npm n'est pas install√©."
        exit 1
    }
    
    # V√©rifier PHP
    try {
        $phpVersion = php --version
        Write-Success "PHP d√©tect√©"
    }
    catch {
        Write-Error "PHP n'est pas install√©. Veuillez l'installer."
        exit 1
    }
    
    # V√©rifier Composer
    try {
        composer --version | Out-Null
        Write-Success "Composer d√©tect√©"
    }
    catch {
        Write-Error "Composer n'est pas install√©. Veuillez l'installer depuis https://getcomposer.org/"
        exit 1
    }
    
    # V√©rifier MySQL
    try {
        mysql --version | Out-Null
        Write-Success "MySQL d√©tect√©"
    }
    catch {
        Write-Warning "MySQL n'est pas d√©tect√© dans le PATH. Assurez-vous qu'il est install√© et en cours d'ex√©cution."
    }
}

# Installation du backend
function Install-Backend {
    Write-Info "Installation du backend Laravel..."
    
    if (-not (Test-Path "backend")) {
        Write-Error "Le dossier backend n'existe pas"
        exit 1
    }
    
    Set-Location backend
    
    # Installation des d√©pendances
    Write-Info "Installation des d√©pendances PHP..."
    composer install
    
    # Configuration de l'environnement
    if (-not (Test-Path ".env")) {
        Write-Info "Cr√©ation du fichier .env..."
        Copy-Item ".env.example" ".env"
        Write-Success "Fichier .env cr√©√©"
    }
    else {
        Write-Warning "Le fichier .env existe d√©j√†"
    }
    
    # G√©n√©ration de la cl√© d'application
    Write-Info "G√©n√©ration de la cl√© d'application..."
    php artisan key:generate
    
    # Configuration JWT
    Write-Info "Configuration JWT..."
    php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider" --quiet
    php artisan jwt:secret --force
    
    Set-Location ..
    Write-Success "Backend install√© avec succ√®s"
}

# Installation du frontend
function Install-Frontend {
    Write-Info "Installation du frontend React..."
    
    if (-not (Test-Path "frontend")) {
        Write-Error "Le dossier frontend n'existe pas"
        exit 1
    }
    
    Set-Location frontend
    
    # Installation des d√©pendances
    Write-Info "Installation des d√©pendances Node.js..."
    npm install
    
    # Configuration de l'environnement
    if (-not (Test-Path ".env")) {
        Write-Info "Cr√©ation du fichier .env frontend..."
        @"
VITE_API_BASE_URL=http://localhost:8000/api
VITE_APP_URL=http://localhost:5173
"@ | Out-File -FilePath ".env" -Encoding UTF8
        Write-Success "Fichier .env frontend cr√©√©"
    }
    else {
        Write-Warning "Le fichier .env frontend existe d√©j√†"
    }
    
    Set-Location ..
    Write-Success "Frontend install√© avec succ√®s"
}

# Configuration de la base de donn√©es
function Setup-Database {
    Write-Info "Configuration de la base de donn√©es..."
    
    Set-Location backend
    
    # Demander les informations de base de donn√©es
    Write-Host ""
    Write-Info "Configuration de la base de donn√©es MySQL:"
    $dbName = Read-Host "Nom de la base de donn√©es (d√©faut: odeo_db)"
    if ([string]::IsNullOrEmpty($dbName)) { $dbName = "odeo_db" }
    
    $dbUser = Read-Host "Utilisateur MySQL (d√©faut: root)"
    if ([string]::IsNullOrEmpty($dbUser)) { $dbUser = "root" }
    
    $dbPassword = Read-Host "Mot de passe MySQL" -AsSecureString
    $dbPasswordPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($dbPassword))
    
    $dbHost = Read-Host "Host MySQL (d√©faut: 127.0.0.1)"
    if ([string]::IsNullOrEmpty($dbHost)) { $dbHost = "127.0.0.1" }
    
    $dbPort = Read-Host "Port MySQL (d√©faut: 3306)"
    if ([string]::IsNullOrEmpty($dbPort)) { $dbPort = "3306" }
    
    # Mise √† jour du fichier .env
    Write-Info "Mise √† jour de la configuration .env..."
    $envContent = Get-Content ".env"
    $envContent = $envContent -replace "DB_DATABASE=.*", "DB_DATABASE=$dbName"
    $envContent = $envContent -replace "DB_USERNAME=.*", "DB_USERNAME=$dbUser"
    $envContent = $envContent -replace "DB_PASSWORD=.*", "DB_PASSWORD=$dbPasswordPlain"
    $envContent = $envContent -replace "DB_HOST=.*", "DB_HOST=$dbHost"
    $envContent = $envContent -replace "DB_PORT=.*", "DB_PORT=$dbPort"
    $envContent | Set-Content ".env"
    
    # Cr√©ation de la base de donn√©es
    Write-Info "Cr√©ation de la base de donn√©es..."
    try {
        mysql -h $dbHost -P $dbPort -u $dbUser -p$dbPasswordPlain -e "CREATE DATABASE IF NOT EXISTS $dbName CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        Write-Success "Base de donn√©es cr√©√©e avec succ√®s"
    }
    catch {
        Write-Error "Erreur lors de la cr√©ation de la base de donn√©es"
        exit 1
    }
    
    Set-Location ..
}

# Ex√©cution des migrations et seeders
function Run-MigrationsAndSeeds {
    Write-Info "Ex√©cution des migrations et seeders..."
    
    Set-Location backend
    
    # Migrations
    Write-Info "Ex√©cution des migrations..."
    php artisan migrate
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Migrations ex√©cut√©es avec succ√®s"
    }
    else {
        Write-Error "Erreur lors des migrations"
        exit 1
    }
    
    # Seeders
    Write-Info "Ex√©cution des seeders..."
    php artisan db:seed
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Seeders ex√©cut√©s avec succ√®s"
    }
    else {
        Write-Error "Erreur lors des seeders"
        exit 1
    }
    
    Set-Location ..
}

# Affichage des informations de connexion
function Show-LoginInfo {
    Write-Host ""
    Write-Success "üéâ Installation termin√©e avec succ√®s !"
    Write-Host ""
    Write-Info "=== INFORMATIONS DE CONNEXION ==="
    Write-Host ""
    Write-Host "üëë ADMINISTRATEUR:" -ForegroundColor Green
    Write-Host "   Email: admin@odeo.com"
    Write-Host "   Mot de passe: password123"
    Write-Host ""
    Write-Host "üè¢ AGENCE:" -ForegroundColor Blue
    Write-Host "   Email: agence1@odeo.com"
    Write-Host "   Mot de passe: password123"
    Write-Host ""
    Write-Host "üë§ CLIENT:" -ForegroundColor Yellow
    Write-Host "   Email: client1@odeo.com"
    Write-Host "   Mot de passe: password123"
    Write-Host ""
    Write-Info "=== POUR D√âMARRER L'APPLICATION ==="
    Write-Host ""
    Write-Host "1. D√©marrer le backend:"
    Write-Host "   cd backend; php artisan serve"
    Write-Host ""
    Write-Host "2. D√©marrer le frontend (dans un autre terminal):"
    Write-Host "   cd frontend; npm run dev"
    Write-Host ""
    Write-Host "3. Acc√©der √† l'application:"
    Write-Host "   Frontend: http://localhost:5173"
    Write-Host "   Backend API: http://localhost:8000"
    Write-Host ""
}

# Menu principal
function Show-MainMenu {
    Write-Host "Que souhaitez-vous faire ?"
    Write-Host "1. Installation compl√®te (recommand√©)"
    Write-Host "2. Installer seulement le backend"
    Write-Host "3. Installer seulement le frontend"
    Write-Host "4. Configurer seulement la base de donn√©es"
    Write-Host "5. Ex√©cuter seulement les migrations/seeders"
    Write-Host "6. Quitter"
    Write-Host ""
    $choice = Read-Host "Votre choix (1-6)"
    
    switch ($choice) {
        "1" {
            Check-Requirements
            Install-Backend
            Install-Frontend
            Setup-Database
            Run-MigrationsAndSeeds
            Show-LoginInfo
        }
        "2" {
            Check-Requirements
            Install-Backend
            Write-Success "Backend install√©. N'oubliez pas de configurer la base de donn√©es."
        }
        "3" {
            Check-Requirements
            Install-Frontend
            Write-Success "Frontend install√©."
        }
        "4" {
            Setup-Database
        }
        "5" {
            Run-MigrationsAndSeeds
            Show-LoginInfo
        }
        "6" {
            Write-Info "Au revoir !"
            exit 0
        }
        default {
            Write-Error "Choix invalide"
            Show-MainMenu
        }
    }
}

# Point d'entr√©e principal
function Main {
    Write-Host "üèõÔ∏è Bienvenue dans l'installateur ODEO" -ForegroundColor Cyan
    Write-Host ""
    Show-MainMenu
}

# Ex√©cution du script
Main
